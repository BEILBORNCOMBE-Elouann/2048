// ldd: -lncurses
#include <ncurses.h>
#include <time.h>
#include <stdlib.h>
/*demander si le nom du jouer doit être donné dans la console ou s'il il faut le mettre dans la code*/

#define TAILLE 6
typedef int board_t[TAILLE][TAILLE];

typedef enum {
 UP = KEY_UP,
 DOWN = KEY_DOWN,
 LEFT = KEY_LEFT,
 RIGHT = KEY_RIGHT,
 END = KEY_BACKSPACE
} key ;

board_t board;
int score=0;

void INIT_2048 () {
 initscr();
 raw();
 keypad(stdscr, TRUE);
 noecho();
 srand(time(NULL));
}

void DONE_2048() {
 endwin();
 exit(0);
}

void init_board(){
 for (int i1=0; i1<TAILLE;i1++){
   for (int i2=0; i2<TAILLE;i2++){
     board[i1][i2]=0;
	}
 }
}

void display_board() {
    move(0, 0);
    printw("\n           Score: %i\n", score);
    for (int a1=0;a1<TAILLE;a1++){
    printw("+-------");
    }printw("+\n");
    for (int i1 = 0; i1 < TAILLE; i1++) {
        for (int a1=0;a1<TAILLE;a1++){
    		printw("|       ");
      }printw("|\n");
      	for (int i2 = 0; i2 < TAILLE; i2++) {
          if (board[i1][i2]!=0){
        	printw("|%4i   ",board[i1][i2]);
          }else 
            printw("|       ");
        }
        printw("|\n");
      for (int a1=0;a1<TAILLE;a1++){
    		printw("|       ");
      }printw("|\n");
      for (int a1=0;a1<TAILLE;a1++){
    	printw("+-------");
    	}printw("+\n");
    }
    refresh();
}
 
int count_empty(){
  int compteur=0;
  for (int i1=0; i1<TAILLE;i1++){
   for (int i2=0; i2<TAILLE;i2++){
     if(board[i1][i2]==0)
       compteur++;
	}
 }
  return compteur;
}

int random_int(int n) {
    return rand() % n;
}

void add_two(int empty){
  int compteur=0;
  int aleatoire= rand() %empty;
  for (int i1=0; i1<TAILLE;i1++){
   for (int i2=0; i2<TAILLE;i2++){
     if(board[i1][i2]==0){
       if (compteur!=aleatoire){
       compteur++;
       }else {
        board[i1][i2]=2;
        score=score+2;
        return;
       }
	}
 }
}
}

int shift_board(){
 int moved=0;
 int i,j;
 for (i=0;i<TAILLE;i++){
   for (j=1;j<TAILLE;j++){
     int i3=j;
     while(board[i][i3-1] == 0 && board[i][i3]!=0 && i3>=1){
       board[i][i3-1]=board[i][i3];
       board[i][i3]=0;
       i3--;
       moved=1;
     }
   }
 }
  return moved;
}

int update_board(){
  int addi=0;
  shift_board();
  int i,j;
  for (i=0;i<TAILLE;i++){
   for (j=0;j<TAILLE-1;j++){
     if(board[i][j]==board[i][j+1]){
       board[i][j]=2*board[i][j];
       board[i][j+1]=0;
       addi=1;
     }
   }
 }
  shift_board();
  return addi;
}


key get_key(){
 switch(getch()){
   case UP:
     return UP;
   case DOWN:
     return DOWN;
   case LEFT:
     return LEFT;
   case RIGHT:
     return RIGHT;
   case END:
     return END;
   default:
     return get_key();
 }
}


void swap(int* a,int* b){
  int temp= *a;
  *a = *b;
  *b =temp;
}

void mirror_board(){
  for (int i=0; i<TAILLE;i++){
   for (int j=0; j<(TAILLE/2);j++){
    swap(&board[i][j],&board[i][TAILLE-1-j]); 
   }
  }
}

void pivot_board(){
  for (int i=0; i<TAILLE;i++){
   for (int j=i+1; j<TAILLE;j++){
    swap(&board[i][j],&board[j][i]); 
   }
  }
}

int game_over(int add){
  int vide = count_empty();
  if (vide==0){
  	printw("============ GAME OVER ===========\n");
  	printw("========= (press any key) ========\n");
    return 1;
    }
  else if (add){
    add_two(vide);
    display_board();
    return 0;
    }
  else
    return 0;
}
  
int play(key touche){
  int valide=0;
    if (touche==LEFT){
     valide=update_board();
    } else if (touche==RIGHT){
     mirror_board();
     valide=update_board();
     mirror_board();
    } else if (touche==UP){
     pivot_board();
     valide=update_board();
     pivot_board();
    } else if (touche==DOWN){
     pivot_board();
     mirror_board();
     valide=update_board();
     mirror_board();
     pivot_board();
    }
  return valide;
}

int main() {
  int add=1;
  INIT_2048();
  init_board();
  while(!game_over(add)){
    key touche = get_key();
    play(touche);
  }
  getch();
  DONE_2048();
}
